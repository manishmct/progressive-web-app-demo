  <div style="position: relative;display: inline-block;">
      <canvas width="320" height="240" id="webcodecam-canvas"></canvas>
      <div class="scanner-laser laser-rightBottom" style="opacity: 0.5;"></div>
      <div class="scanner-laser laser-rightTop" style="opacity: 0.5;"></div>
      <div class="scanner-laser laser-leftBottom" style="opacity: 0.5;"></div>
      <div class="scanner-laser laser-leftTop" style="opacity: 0.5;"></div>
  </div>
  <div class="spacer" style="height:20px;" id="scanBarcode-spacer1"></div>
  <button ion-button icon-left (click)="decoderStart()">
    <ion-icon name="play"></ion-icon>
</button>
<button ion-button icon-left (click)="decoderStop()">
  <ion-icon name="square"></ion-icon>
</button>





import { Component, AfterViewChecked } from '@angular/core';
import { NavController, NavParams } from 'ionic-angular';
// import * as $ from 'jquery';
import { ProductDetailPage } from '../product-detail/product-detail';
import { WebCodeCamJS } from 'assets/js/webcodecamjs'
declare var $: any;

@Component({
  selector: 'page-scan-barcode',
  templateUrl: 'scan-barcode.html'
})
export class ScanBarcodePage {

  readData: any;
  decoder: any;
  decoderOptions: any;

  constructor(public navCtrl: NavController, public navParams: NavParams) {
    this.readData = {"EmpId":"Scan QR Code"};
    this.decoderOptions = {
        DecodeQRCodeRate: 5,                    // null to disable OR int > 0 !
        DecodeBarCodeRate: 5,                   // null to disable OR int > 0 !
        successTimeout: 500,                    // delay time when decoding is succeed
        codeRepetition: true,                   // accept code repetition true or false
        tryVertical: true,                      // try decoding vertically positioned barcode true or false
        frameRate: 15,                          // 1 - 25
        width: 320,                             // canvas width
        height: 240,                            // canvas height
        constraints: {                          // default constraints
            video: {
                mandatory: {
                    maxWidth: 1280,
                    maxHeight: 720
                },
                optional: [{
                    sourceId: true
                }]
            },
            audio: false
        },
        flipVertical: false,                    // boolean
        flipHorizontal: false,                  // boolean
        zoom: -1,                               // if zoom = -1, auto zoom for optimal resolution else int
        beep: 'assets/js/beep.mp3',                 // string, audio file location
        decoderWorker: 'assets/js/DecoderWorker.js',   // string, DecoderWorker file location
        brightness: 0,                          // int
        autoBrightnessValue: false,             // functional when value autoBrightnessValue is int
        grayScale: false,                       // boolean
        contrast: 0,                            // int
        threshold: 0,                           // int 
        sharpness: [],      // to On declare matrix, example for sharpness ->  [0, -1, 0, -1, 5, -1, 0, -1, 0]
        resultFunction: function(result) {
            /*
                result.format: code format,
                result.code: decoded string,
                result.imgData: decoded image data
            */
            alert(result.code);
        },
        cameraSuccess: function(stream) {           //callback funtion to camera success
            console.log('success');
            console.log(stream);
        },
        canPlayFunction: function() {               //callback funtion to can play
            console.log('canPlayFunction');
        },
        getDevicesError: function(error) {          //callback funtion to get Devices error
            console.log(error);
        },
        getUserMediaError: function(error) {        //callback funtion to get usermedia error
            console.log(error);
        },
        cameraError: function(error) {              //callback funtion to camera error  
            console.log(error);
        }
    };
    this.decoder = new WebCodeCamJS('#webcodecam-canvas');
    //this.decoder.buildSelectMenu('#camera-select', sel);
    console.log(this.decoder);
    // this.decoder.buildSelectMenu('#camera-select', 0);
  }
  itemTapped(event, item) {
    console.log(this.readData);
    this.navCtrl.push(ProductDetailPage, {
      item: this.readData
    });
  }
  decoderStart(){
    this.readData = {"EmpId":"Scanning...."};
    this.decoder.play();
  }
  decoderStop()
  {
    this.decoder.stop();
  }
  ngOnDestroy() {
    //Called once, before the instance is destroyed.
    //Add 'implements OnDestroy' to the class.
    console.log("Destroyed");
  }
  ngOnInit(){
    // this.decoder.init();
  }
  // ngAfterViewChecked() {
  //   //Called after every check of the component's view. Applies to components only.
  //   //Add 'implements AfterViewChecked' to the class.
  //   let that = this;
  //   $('#qr-canvas').WebCodeCam({
  //     ReadQRCode: true,
  //     ReadBarecode: true,
  //     width: 320,
  //     height: 240,
  //     Source: {
  //       // max Videosource resolution width
  //       maxWidth: 640,
  //       // max Videosource resolution height
  //       maxHeight: 480
  //     },
  //     flipVertical: false,
  //     flipHorizontal: false,
  //     // if zoom = -1, auto zoom for optimal resolution else int
  //     zoom: -1,
  //     // string, audio file location
  //     beep: "assets/js/beep.mp3",
  //     // functional when value autoBrightnessValue is int
  //     autoBrightnessValue: false,
  //     brightness: 0,
  //     grayScale: false,
  //     contrast: 0,
  //     threshold: 0,
  //     // or matrix, example for sharpness ->  [0, -1, 0, -1, 5, -1, 0, -1, 0]
  //     sharpness: [],
  //     resultFunction: function (resText, lastImageSrc) {
  //       // resText as decoded code, lastImageSrc as image source
  //       alert(resText);
  //       console.log(resText);
  //       that.readData = JSON.parse(resText);
  //     }
  //   });
  // }
}
